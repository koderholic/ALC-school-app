const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const moment = require('moment');
const City = require('../models/city');
const generateCode = require('crypto-random-string');
const uniquefy = require('unique-string');

var studentSchema = new Schema({
    firstname : {type:String, required:true},
    middlename : {type:String, required:true},
    lastname : {type:String, required:true},
    gender : Boolean,
    date_of_birth : {type :Date , required:true},
    email : {type : String, required : true},
    mobile1 : {type:String, required:true},
    mobile2 : String,
    address1 : {type:String, required:true},
    address2 : String,
    city_id : {type:Schema.objectId, ref:'City', required:true},
    state_id : {type:Schema.objectId, ref:'State', required:true},
    postal : String,
    photo : String,
    current_class : {type:Schema.objectId, ref:'Class', required:true},
    current_session : {type:String, required:true},
    courses : [{type:Schema.objectId, ref:"Course", required:true }],
    student_code : {type:String, unique:true},
    created_at : {type:Date, default:Date.now},
    updated_at : {type:Date, default:Date.now},

});

studentSchema
.virtual('fullname')
.get(function () {
    return `${this.firstname} ${this.middlename} ${this.lastname}`;
});

studentSchema
.virtual('dob')
.get(function () {
    return moment(this.date_of_birth).format('MMMM Do. YYYY');
});

studentSchema
.virtual('regDate')
.get(function () {
    return moment(this.created_at).format('MMMM Do. YYYY');
});

studentSchema
.virtual('updatedAt')
.get(function () {
    return moment(this.updated_at).format('MMMM Do. YYYY');
});

studentSchema
.virtual('url')
.get(function () {
    return `/students/profile/${this._id} `;
});

studentSchema
.virtual('address')
.get(function () {
    City.findById(this.city_id)
    .populate('state_id')
    .exec().then(function (city) {
        return `${this.address1} ${city.name} ${city.state_id}`;
    }).catch(function (err) {
        return '';
    });
});

studentSchema.methods.uniqueCode = function (randomCode) {

    studentSchema.findOne({student_code : randomCode}).then(function (isMatch) {
        if (isMatch) {
            return false ;
        }
        return true;
    });
}

studentSchema.pre('save',function(next) {
    //Math.random().toString(36).substring(7);//this takes the random number generated by Math.random(),converts it to a string usinf base 36 as conversion base and extract 7 characters from it
    if(!this.isModified('student_code')) return next();
    let randomCode = generateCode(8);
    if(studentSchema.uniqueCode(randomCode)){
        this.student_code = randomCode;
    }else{
        this.student_code = uniquefy(randomCode).substring(8);
    }
    
});



module.exports = mongoose.model('Student',studentSchema);